datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Amenity {
  id              Int              @id @default(autoincrement())
  name            String
  category        Category         @relation(fields: [categoryId], references: [id])
  categoryId      Int
  occasions       Occasion[]
  amenityToVenues AmenityToVenue[]
}

model AmenityToVenue {
  venueId   Int
  amenityId Int

  venue   Venue   @relation(fields: [venueId], references: [id])
  amenity Amenity @relation(fields: [amenityId], references: [id])

  @@id([venueId, amenityId])
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String
  amenities Amenity[]
}

model Favourite {
  id      Int   @id @default(autoincrement())
  user    User  @relation(fields: [userId], references: [id])
  userId  Int
  venue   Venue @relation(fields: [venueId], references: [id])
  venueId Int

  @@unique([userId, venueId])
}

model Occasion {
  id        Int       @id @default(autoincrement())
  name      String
  amenities Amenity[]
}

model Rating {
  id            Int         @id @default(autoincrement())
  score         Int
  review        String?
  createdAt     DateTime    @default(now())
  reservationId Int         @unique
  reservation   Reservation @relation(fields: [reservationId], references: [id])
}

model Reservation {
  id              Int      @id @default(autoincrement())
  venue           Venue    @relation(fields: [venueId], references: [id])
  venueId         Int
  user            User     @relation(fields: [userId], references: [id])
  userId          Int
  dateStart       DateTime
  dateEnd         DateTime
  isPendingRating Boolean
  rating          Rating?
}

model User {
  id           Int           @id @default(autoincrement())
  email        String        @unique
  name         String?
  phoneNumber  String?
  password     String
  venues       Venue[]
  reservations Reservation[]
  favourites   Favourite[]
}

model Venue {
  id                             Int              @id @default(autoincrement())
  pricePerNightInEURCent         Int
  rating                         Float
  capacity                       Int
  amountsOfBeds                  Int
  extraSleepingDetails           String
  name                           String
  images                         Json
  description                    String
  checkInHour                    Int
  checkOutHour                   Int
  distanceFromCityCenterInMeters Int
  facebookUrl                    String?
  instagramUrl                   String?
  twitterUrl                     String?
  websiteUrl                     String?
  streetNumber                   String
  streetName                     String
  postalCode                     String
  city                           String
  latitude                       Float?
  longitude                      Float?
  owner                          User             @relation(fields: [ownerId], references: [id])
  ownerId                        Int
  reservations                   Reservation[]
  favourites                     Favourite[]
  amenityToVenues                AmenityToVenue[]
  venueType                      VenueType        @relation(fields: [venueTypeId], references: [id])
  venueTypeId                    Int
}

model VenueType {
  id     Int     @id @default(autoincrement())
  name   String  @unique
  venues Venue[]
}
